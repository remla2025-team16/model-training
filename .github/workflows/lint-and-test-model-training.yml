
name: Lint, Test, and Update Metrics

on: [push, pull_request]


permissions:
  contents: write
  pull-requests: write

jobs:

  lint:
    name: "Code Linting"
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4


    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'


    - name: Cache Pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flake8
        pip install -r requirements.txt


    - name: Run pylint
      run: |
        pylint sentiment_model_trainer/ tests/ 

    - name: Run flake8
      run: |
        flake8 sentiment_model_trainer/ tests/ --max-line-length=100 --ignore=E203,W503 --exclude=.git,__pycache__,build,dist

  testing:
    name: "Run Tests & Generate Coverage"
    needs: lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage-badge 

    - name: Prepare directories
      run: |
        mkdir -p models
        mkdir -p metrics

    - name: Download Model from Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh release download v1.0.0 --pattern 'sentiment-model.pkl' --output models/sentiment-model.pkl

    - name: Run tests with coverage
      run: |
        pytest --cov=sentiment_model_trainer --cov-report=term-missing | tee metrics/test_report.txt

    - name: Create coverage badge
      run: |
        coverage-badge -o metrics/coverage.svg

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      with:
        name: test-metrics-${{ matrix.python-version }}
        path: |
          metrics/test_report.txt
          metrics/coverage.svg

    - name: Commit metrics
      if: github.ref == 'refs/heads/main' && matrix.python-version == '3.12'
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git pull --rebase
        git add metrics/
        # The '|| exit 0' part prevents the step from failing if there are no changes to commit.
        git commit -m "Update test metrics and coverage badge" || exit 0
        git push
